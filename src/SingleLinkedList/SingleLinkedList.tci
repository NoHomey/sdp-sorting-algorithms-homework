#pragma once

#include "SingleLinkedList.thd"
#include <utility>

template<typename T, class NodeAllocator>
inline SingleLinkedList<T, NodeAllocator>::SingleLinkedList() noexcept
: head{nullptr}, allocator{} { }

template<typename T, class NodeAllocator>
inline SingleLinkedList<T, NodeAllocator>::SingleLinkedList(const Allocator& allocator) noexcept
: head{nullptr}, allocator{allocator} { }

template<typename T, class NodeAllocator>
inline SingleLinkedList<T, NodeAllocator>::SingleLinkedList(const std::size_t allocationCount) noexcept
: head{nullptr}, allocator{allocationCount} { }

template<typename T, class NodeAllocator>
inline SingleLinkedList<T, NodeAllocator>::~SingleLinkedList() noexcept {
    destroy();
    null();
}

template<typename T, class NodeAllocator>
inline SingleLinkedList<T, NodeAllocator>::SingleLinkedList(const SingleLinkedList& other)
: SingleLinkedList{} {
    if(other.allocator.isShared()) {
        allocator = other.allocator;
    }
    copy(other);
}

template<typename T, class NodeAllocator>
inline SingleLinkedList<T, NodeAllocator>::SingleLinkedList(SingleLinkedList&& other) noexcept
: SingleLinkedList{} {
    move(std::move(other));
}

template<typename T, class NodeAllocator>
SingleLinkedList<T, NodeAllocator>& SingleLinkedList<T, NodeAllocator>::operator=(const SingleLinkedList& other) {
    if(this != &other) {
        move({other});
    }
    return *this;
}

template<typename T, class NodeAllocator>
SingleLinkedList<T, NodeAllocator>& SingleLinkedList<T, NodeAllocator>::operator=(SingleLinkedList&& other) noexcept {
    if(this != &other) {
        move(std::move(other));
    }
    return *this;
}

template<typename T, class NodeAllocator>
inline std::size_t SingleLinkedList<T, NodeAllocator>::length() const noexcept {
    if(!allocator.isShared()) {
        return allocator.inUseAllocatedNodes();
    }
    std::size_t counter = 0;
    for(const Node* iter = head; iter; iter = iter->next) {
        ++counter;
    }
    return counter;
}

template<typename T, class NodeAllocator>
inline std::size_t SingleLinkedList<T, NodeAllocator>::capacity() const noexcept {
    return allocator.allocatedNodes();
}

template<typename T, class NodeAllocator>
inline std::size_t SingleLinkedList<T, NodeAllocator>::getNextAllocationCount() const noexcept {
    return allocator.getNextAllocationCount();
}

template<typename T, class NodeAllocator>
inline bool SingleLinkedList<T, NodeAllocator>::isEmpty() const noexcept {
    return !head;
}

template<typename T, class NodeAllocator>
inline typename SingleLinkedList<T, NodeAllocator>::ConstIterator SingleLinkedList<T, NodeAllocator>::first() const noexcept {
    return {head, this};
}

template<typename T, class NodeAllocator>
inline void SingleLinkedList<T, NodeAllocator>::setNextAllocationCount(const std::size_t allocationCount) noexcept {
    allocator.setNextAllocationCount(allocationCount);
}

template<typename T, class NodeAllocator>
inline void SingleLinkedList<T, NodeAllocator>::prepend(const T& value) {
    prepend(allocator.newNode(value));
}

template<typename T, class NodeAllocator>
inline void SingleLinkedList<T, NodeAllocator>::prepend(T&& value) {
    prepend(allocator.newNode(std::move(value)));
}

template<typename T, class NodeAllocator>
unsigned char SingleLinkedList<T, NodeAllocator>::log2(const std::size_t n) noexcept {
    unsigned char res = 0;
    std::size_t d = n;
    while(d >> 1) {
        ++res;
        d >>= 1;
    }
    return res;
}

template<typename T, class NodeAllocator>
inline void SingleLinkedList<T, NodeAllocator>::prepend(Node* node) noexcept {
    assert(node);
    node->next = head;
    head = node;
}

template<typename T, class NodeAllocator>
inline void SingleLinkedList<T, NodeAllocator>::destroy() noexcept {
    if(allocator.canDeleteAllAllocatedNodes()) {
        allocator.deleteAllAllocatedNodes();
    } else {
        Node* temp;
        while(head) {
            temp = head;
            head = head->next;
            allocator.deleteNode(temp);
        }
    }
}

template<typename T, class NodeAllocator>
inline void SingleLinkedList<T, NodeAllocator>::null() noexcept {
    head = nullptr;
}

template<typename T, class NodeAllocator>
inline void SingleLinkedList<T, NodeAllocator>::copy(const SingleLinkedList& other) {
    List temp;
    for(const Node* iter = other.head; iter; iter = iter->next) {
        temp.append(allocator.newNode(iter->value));
    }
    head = temp.head;
}

template<typename T, class NodeAllocator>
inline void SingleLinkedList<T, NodeAllocator>::move(SingleLinkedList&& other) noexcept {
    destroy();
    allocator = std::move(other.allocator);
    head = other.head;
    other.null();
}

template<typename T, class NodeAllocator>
inline bool SingleLinkedList<T, NodeAllocator>::shouldSort() const noexcept {
    return !isEmpty() && head->next;
}

template<typename T, class NodeAllocator>
inline void SingleLinkedList<T, NodeAllocator>::appendBucket(List& result, const List& bucket) noexcept {
    if(!bucket.isEmpty()) {
        result.append(bucket);
    }
}

template<typename T, class NodeAllocator>
template<typename BucketSelector>
inline void SingleLinkedList<T, NodeAllocator>::bucketSort(const std::size_t bucketsCount, List* buckets, BucketSelector bucketSelector, const bool ascOrder) noexcept {
    assert(bucketsCount && buckets && shouldSort());
    Node* iter = head;
    for(; iter; iter = iter->next) {
        buckets[bucketSelector(iter->value)].append(iter);
    }
    List result;
    if(ascOrder) {
        for(std::size_t bucketIndex = 0; bucketIndex < bucketsCount; ++bucketIndex) {
            appendBucket(result, buckets[bucketIndex]);
        }
    } else {
        for(std::size_t bucketIndex = bucketsCount; bucketIndex > 0; --bucketIndex) {
            appendBucket(result, buckets[bucketIndex - 1]);
        }
    }
    result.tail->next = nullptr;
    head = result.head;
}

template<typename T, class NodeAllocator>
template<const std::size_t bucketsCount, typename BucketSelector>
inline void SingleLinkedList<T, NodeAllocator>::bucketSort(BucketSelector bucketSelector, const bool ascOrder) noexcept {
    assert(bucketsCount);
    if(shouldSort()) {
        List buckets[bucketsCount];
        bucketSort(bucketsCount, buckets, bucketSelector, ascOrder);
    }
}

template<typename T, class NodeAllocator>
template<typename BucketSelector>
inline void SingleLinkedList<T, NodeAllocator>::bucketSort(const std::size_t bucketsCount, BucketSelector bucketSelector, const bool ascOrder) {
    assert(bucketsCount);
    if(shouldSort()) {
        List* buckets = new List[bucketsCount];
        bucketSort(bucketsCount, buckets, bucketSelector, ascOrder);
        delete[] buckets;
    }
}

template<typename T, class NodeAllocator>
template<typename Comparator>
inline typename SingleLinkedList<T, NodeAllocator>::Node* SingleLinkedList<T, NodeAllocator>::mergeNodes(Node* a, Node* b, Comparator comparator) noexcept {
    assert(a && b);
    Node* left;
    Node* right = comparator(a->value, b->value) ? (left = a, b) : (left = b, a);
    right->next = nullptr;
    left->next = right;
    return left;
}

template<typename T, class NodeAllocator>
inline typename SingleLinkedList<T, NodeAllocator>::Node* SingleLinkedList<T, NodeAllocator>::advanceAndReturnPrev(Node*& node) noexcept {
    Node* res = node;
    node = node->next;
    return res;  
}

template<typename T, class NodeAllocator>
template<typename Comparator>
inline typename SingleLinkedList<T, NodeAllocator>::Node* SingleLinkedList<T, NodeAllocator>::merge(Node* left, Node* right, Comparator comparator) noexcept {
    assert(left && right);
    List merged;
    while(left && right) {
        merged.append(advanceAndReturnPrev((comparator(left->value, right->value) ? left : right)));
    }
    if(left || right) {
        merged.append(left ? left : right);
    }
    return merged.head;
}

template<typename T, class NodeAllocator>
template<typename Comparator>
inline void SingleLinkedList<T, NodeAllocator>::stackMerge(FixedCapacityStack<Node*>& stack, Comparator comparator) noexcept {
    stack.push(merge(stack.pop(), stack.pop(), comparator));
}

template<typename T, class NodeAllocator>
template<typename Comparator>
inline void SingleLinkedList<T, NodeAllocator>::mergeSort(Comparator comparator) {
    if(shouldSort()) {
        const std::size_t tempCount = log2(length());
        Node** temp = new Node*[tempCount];
        FixedCapacityStack<Node*> stack(tempCount, temp);
        Node* iter = head;
        std::size_t counter = 0;
        while(iter) {
            Node* nextIter = iter->next->next;
            stack.push(mergeNodes(iter, iter->next, comparator));
            if(nextIter && !nextIter->next) {
                stack.push(merge(stack.pop(), nextIter, comparator));
                nextIter = nullptr;
            }
            counter += 2;
            for(std::size_t merges = (counter >> 1); !(merges & 1); merges >>= 1) {
                stackMerge(stack, comparator);
            }
            iter = nextIter;
        }
        while(stack.size() > 1) {
            stackMerge(stack, comparator);
        }
        head = stack.pop();
        delete[] temp;
    }
}