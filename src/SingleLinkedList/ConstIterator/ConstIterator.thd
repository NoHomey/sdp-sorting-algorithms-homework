#pragma once

#include "../SingleLinkedList.thd"

template<typename T, class NodeAllocator>
class SingleLinkedList<T, NodeAllocator>::ConstIterator {
    friend SingleLinkedList<T, NodeAllocator>;

public:
    ConstIterator() = delete;

    ~ConstIterator() noexcept = default;

    ConstIterator(const ConstIterator& other) noexcept = default;

    ConstIterator(ConstIterator&& other) noexcept = default;

    ConstIterator& operator=(const ConstIterator& other) noexcept = default;

    ConstIterator& operator=(ConstIterator&& other) noexcept = default;

public:
    explicit operator bool() const noexcept;

    bool operator==(const ConstIterator& other) const noexcept;

    bool operator!=(const ConstIterator& other) const noexcept;

    bool operator!() const noexcept;

    const T& operator*() const noexcept;

    const T* operator->() const noexcept;

public:
    ConstIterator& operator++() noexcept;

    ConstIterator operator++(int) noexcept;

private:
    ConstIterator(const Node* node, const SingleLinkedList<T, NodeAllocator>* list) noexcept;

    bool isValid() const noexcept;

private:
    const Node* node;

    const SingleLinkedList<T, NodeAllocator>* list;
};

#include "ConstIterator.tci"