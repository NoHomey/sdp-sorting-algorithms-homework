#pragma once

#include <cstddef>

#include "../NodeAllocator/Operator/Operator.thd"
#include "../FixedCapacityStack/FixedCapacityStack.thd"

template<typename T, class NodeAllocator = Operator>
class SingleLinkedList {
private:
    struct Node;

public:
    class ConstIterator;

    using Allocator = typename NodeAllocator::template forType<Node>;

public:
    SingleLinkedList() noexcept;

    SingleLinkedList(const Allocator& allocator) noexcept;

    SingleLinkedList(const std::size_t allocationCount) noexcept;

    ~SingleLinkedList() noexcept;

    SingleLinkedList(const SingleLinkedList& other);

    SingleLinkedList(SingleLinkedList&& other) noexcept;

    SingleLinkedList& operator=(const SingleLinkedList& other);

    SingleLinkedList& operator=(SingleLinkedList&& other) noexcept;

public:
    std::size_t length() const noexcept;

    std::size_t capacity() const noexcept;

    std::size_t getNextAllocationCount() const noexcept;

    bool isEmpty() const noexcept;

    ConstIterator first() const noexcept;

public:
    void setNextAllocationCount(const std::size_t allocationCount) noexcept;

    void prepend(const T& value);

    void prepend(T&& value);

public:
    template<const std::size_t bucketsCount, typename BucketSelector>
    void bucketSort(BucketSelector bucketSelector, const bool ascOrder = true) noexcept;

    template<typename BucketSelector>
    void bucketSort(const std::size_t bucketsCount, BucketSelector bucketSelector, const bool ascOrder = true);

public:
    template<typename Comparator>
    void mergeSort(Comparator comparator);

private:
    struct List;

private:
    static unsigned char log2(const std::size_t n) noexcept;

    void prepend(Node* node) noexcept;

    template<typename Comparator>
    static Node* mergeNodes(Node* a, Node* b, Comparator comparator) noexcept;

    static Node* advanceAndReturnPrev(Node*& node) noexcept;

    template<typename Comparator>
    static Node* merge(Node* left, Node* right, Comparator comparator) noexcept;

    template<typename Comparator>
    static void stackMerge(FixedCapacityStack<Node*>& stack, Comparator comparator) noexcept;

private:
    void destroy() noexcept;

    void null() noexcept;

    void copy(const SingleLinkedList& other);

    void move(SingleLinkedList&& other) noexcept;

    bool shouldSort() const noexcept;

    void appendBucket(List& result, const List& bucket) noexcept;

    template<typename BucketSelector>
    void bucketSort(const std::size_t bucketsCount, List* buckets, BucketSelector bucketSelector, const bool ascOrder) noexcept;

private:
    Node* head;

    Allocator allocator;
};

#include "Node/Node.thd"
#include "List/List.thd"
#include "ConstIterator/ConstIterator.thd"
#include "SingleLinkedList.tci"