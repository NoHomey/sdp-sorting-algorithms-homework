#pragma once

#include <cstddef>

template<typename NodeAllocator, const bool canDelete>
class SharedAllocator {
public:
    template<typename T>
    class forType {
    public:
        using SharedAllocatorType = typename NodeAllocator::template forType<T>;

    public:
        forType(SharedAllocatorType* allocator = nullptr) noexcept;

        ~forType() noexcept = default;

        forType(const forType& other) noexcept = default;

        forType(forType&& other) noexcept = default;

        forType& operator=(const forType& other) noexcept = default;

        forType& operator=(forType&& other) noexcept = default;

    public:
        bool isShared() const noexcept;

        std::size_t allocatedNodes() const noexcept;

        std::size_t inUseAllocatedNodes() const noexcept;

        std::size_t getNextAllocationCount() const noexcept;

        bool canDeleteAllAllocatedNodes() const noexcept;
 
    public:
        void setNextAllocationCount(const std::size_t allocationCount) noexcept;

        template<typename... Args>
        T* newNode(Args... args);

        void deleteNode(const T* ptr) noexcept;

        void deleteAllAllocatedNodes() noexcept;

    private:
        typename NodeAllocator::template forType<T>* allocator;
    };
};

#include "SharedAllocator.tci"