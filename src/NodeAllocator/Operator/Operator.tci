#pragma once

#include "Operator.thd"
#include <utility>
#include <cassert>

template<typename T>
inline Operator::forType<T>::forType() noexcept
: counter{0} { }

template<typename T>
inline Operator::forType<T>::forType(const std::size_t) noexcept
: forType{} { }

template<typename T>
inline Operator::forType<T>::forType(const forType& other) noexcept {
    assert(false);
}

template<typename T>
inline typename Operator::forType<T>& Operator::forType<T>::operator=(const forType& other) noexcept {
    if(this != &other) {
        assert(false);
    }
    return *this;
}

template<typename T>
inline bool Operator::forType<T>::isShared() const noexcept {
    return false;
}

template<typename T>
inline std::size_t Operator::forType<T>::allocatedNodes() const noexcept {
    return counter;
}

template<typename T>
inline std::size_t Operator::forType<T>::inUseAllocatedNodes() const noexcept {
    return counter;
}

template<typename T>
inline std::size_t Operator::forType<T>::getNextAllocationCount() const noexcept {
    return 1;
}

template<typename T>
inline bool Operator::forType<T>::canDeleteAllAllocatedNodes() const noexcept {
    return false;
}
 
template<typename T>
inline void Operator::forType<T>::setNextAllocationCount(const std::size_t) noexcept { }

template<typename T>
template<typename... Args>
inline T*  Operator::forType<T>::newNode(Args... args) {
    T* ptr = new T{std::forward<Args>(args)...};
    ++counter;
    return ptr;
}

template<typename T>
inline void Operator::forType<T>::deleteNode(const T* ptr) noexcept {
    assert(counter);
    delete ptr;
    --counter;
}

template<typename T>
inline void Operator::forType<T>::deleteAllAllocatedNodes() noexcept {
    assert(false);
}