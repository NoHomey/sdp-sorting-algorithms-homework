#pragma once

#include "../OrderedConstIterator/OrderedConstIterator.thd"

template<typename T>
class SparseTrie<T>::DescOrderConstIterator
:public SparseTrie<T>::template OrderedConstIterator<SparseTrie<T>::DescOrderConstIterator, true> {
    friend SparseTrie<T>;

    using Base = SparseTrie<T>::OrderedConstIterator<SparseTrie<T>::DescOrderConstIterator, true>;

public:
    DescOrderConstIterator() = delete;

    ~DescOrderConstIterator() noexcept = default;

    DescOrderConstIterator(const DescOrderConstIterator& other) = default;

    DescOrderConstIterator(DescOrderConstIterator&& other) noexcept = default;

    DescOrderConstIterator& operator=(const DescOrderConstIterator& other) = delete;

    DescOrderConstIterator& operator=(DescOrderConstIterator&& other) noexcept = delete;

private:
    static bool shouldMoveDown(const Node* node) noexcept;

    static bool shouldStopAtParent(const Node* node) noexcept;

private:
    DescOrderConstIterator(const SparseTrie<T>* trie) noexcept;

    void next() noexcept;
};

#include "DescOrderConstIterator.tci"