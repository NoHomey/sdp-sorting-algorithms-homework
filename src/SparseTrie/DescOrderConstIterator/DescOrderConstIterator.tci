#pragma once

#include "DescOrderConstIterator.thd"
#include <cassert>

template<typename T>
inline SparseTrie<T>::DescOrderConstIterator::DescOrderConstIterator(const SparseTrie<T>* trie) noexcept
: Base{trie} { }

template<typename T>
bool SparseTrie<T>::DescOrderConstIterator::shouldMoveDown(const Node* node) noexcept {
    assert(node);
    return node->children.hasAny();
}

template<typename T>
bool SparseTrie<T>::DescOrderConstIterator::shouldStopAtParent(const Node* parent) noexcept {
    assert(parent);
    return !parent->objects.isEmpty();
}

template<typename T>
void SparseTrie<T>::DescOrderConstIterator::next() noexcept {
    Base::next();
}