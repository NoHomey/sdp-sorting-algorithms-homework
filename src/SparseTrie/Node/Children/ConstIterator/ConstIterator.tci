#pragma once

#include "ConstIterator.thd"
#include <cassert>

template<typename T>
template<const bool reverse>
inline SparseTrie<T>::Node::Children::ConstIterator<reverse>::operator bool() const noexcept {
    return isValid();
}

template<typename T>
template<const bool reverse>
inline bool SparseTrie<T>::Node::Children::ConstIterator<reverse>::operator==(const ConstIterator& other) const noexcept {
    return (children == other.children) && (child == other.child);
}

template<typename T>
template<const bool reverse>
inline bool SparseTrie<T>::Node::Children::ConstIterator<reverse>::operator!=(const ConstIterator& other) const noexcept {
    return !operator=(other);
}

template<typename T>
template<const bool reverse>
inline bool SparseTrie<T>::Node::Children::ConstIterator<reverse>::operator!() const noexcept {
    return !isValid();
}

template<typename T>
template<const bool reverse>
inline const typename SparseTrie<T>::Node* SparseTrie<T>::Node::Children::ConstIterator<reverse>::operator*() const noexcept {
    assert(isValid());
    return &child->node;
}

template<typename T>
template<const bool reverse>
inline typename SparseTrie<T>::Node::Children::template ConstIterator<reverse>& SparseTrie<T>::Node::Children::ConstIterator<reverse>::operator++() noexcept {
    if(isValid()) {
        child = reverse ? child->left : child->right;
    }
    return *this;
}

template<typename T>
template<const bool reverse>
inline typename SparseTrie<T>::Node::Children::template ConstIterator<reverse> SparseTrie<T>::Node::Children::ConstIterator<reverse>::operator++(int) noexcept {
    ConstIterator copy = *this;
    operator++();
    return copy;
}

template<typename T>
template<const bool reverse>
inline typename SparseTrie<T>::Node::Children::template ConstIterator<reverse>& SparseTrie<T>::Node::Children::ConstIterator<reverse>::operator--() noexcept {
    if(isValid()) {
        child = reverse ? child->right : child->left;
    }
    return *this;
}

template<typename T>
template<const bool reverse>
inline typename SparseTrie<T>::Node::Children::template ConstIterator<reverse> SparseTrie<T>::Node::Children::ConstIterator<reverse>::operator--(int) noexcept {
    ConstIterator copy = *this;
    operator--();
    return copy;
}

template<typename T>
template<const bool reverse>
inline SparseTrie<T>::Node::Children::ConstIterator<reverse>::ConstIterator(const Child* child, const SparseTrie<T>::Node::Children* children) noexcept
: child{child}, children{children} { }

template<typename T>
template<const bool reverse>
inline bool SparseTrie<T>::Node::Children::ConstIterator<reverse>::isValid() const noexcept {
    return child;
}