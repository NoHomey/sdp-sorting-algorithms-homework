#pragma once

#include "../Children.thd"

template<typename T>
template<const bool reverse>
class SparseTrie<T>::Node::Children::ConstIterator {
    friend SparseTrie<T>::Node::Children;

public:
    ConstIterator() = delete;

    ~ConstIterator() noexcept = default;

    ConstIterator(const ConstIterator& other) noexcept = default;

    ConstIterator(ConstIterator&& other) noexcept = default;

    ConstIterator& operator=(const ConstIterator& other) noexcept = default;

    ConstIterator& operator=(ConstIterator&& other) noexcept = default;

public:
    explicit operator bool() const noexcept;

    bool operator==(const ConstIterator& other) const noexcept;

    bool operator!=(const ConstIterator& other) const noexcept;

    bool operator!() const noexcept;

    const SparseTrie<T>::Node* operator*() const noexcept;

public:
    ConstIterator& operator++() noexcept;

    ConstIterator operator++(int) noexcept;

    ConstIterator& operator--() noexcept;

    ConstIterator operator--(int) noexcept;

private:
    ConstIterator(const Child* child, const SparseTrie<T>::Node::Children* children) noexcept;

    bool isValid() const noexcept;

private:
    const Child* child;

    const SparseTrie<T>::Node::Children* children;
};

#include "ConstIterator.tci"