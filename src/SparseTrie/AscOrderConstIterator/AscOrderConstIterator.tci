#pragma once

#include "AscOrderConstIterator.thd"
#include <cassert>

template<typename T>
inline SparseTrie<T>::AscOrderConstIterator::AscOrderConstIterator(const SparseTrie<T>* trie) noexcept
: Base{trie} { }

template<typename T>
bool SparseTrie<T>::AscOrderConstIterator::shouldMoveDown(const Node* node) noexcept {
    assert(node);
    return node->objects.isEmpty() && node->children.hasAny();
}

template<typename T>
bool SparseTrie<T>::AscOrderConstIterator::shouldStopAtParent(const Node* parent) noexcept {
    assert(parent);
    return false;
}

template<typename T>
void SparseTrie<T>::AscOrderConstIterator::next() noexcept {
    const Node* node = Base::stack.top();
    if(node->children.hasAny()) {
        node = *(node->children.first());
        Base::stack.push(node);
        Base::path[Base::pathLength++] = node->label;
        Base::tryToMoveDown();
    } else {
        Base::next();
    }
}