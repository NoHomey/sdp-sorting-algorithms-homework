#pragma once

#include "../OrderedConstIterator/OrderedConstIterator.thd"

template<typename T>
class SparseTrie<T>::AscOrderConstIterator
:public SparseTrie<T>::template OrderedConstIterator<SparseTrie<T>::AscOrderConstIterator, false> {
    friend SparseTrie<T>;

    using Base = SparseTrie<T>::OrderedConstIterator<SparseTrie<T>::AscOrderConstIterator, false>;

public:
    AscOrderConstIterator() = delete;

    ~AscOrderConstIterator() noexcept = default;

    AscOrderConstIterator(const AscOrderConstIterator& other) = default;

    AscOrderConstIterator(AscOrderConstIterator&& other) noexcept = default;

    AscOrderConstIterator& operator=(const AscOrderConstIterator& other) = delete;

    AscOrderConstIterator& operator=(AscOrderConstIterator&& other) noexcept = delete;

private:
    static bool shouldMoveDown(const Node* node) noexcept;

    static bool shouldStopAtParent(const Node* node) noexcept;

private:
    AscOrderConstIterator(const SparseTrie<T>* trie) noexcept;

    void next() noexcept;
};

#include "AscOrderConstIterator.tci"