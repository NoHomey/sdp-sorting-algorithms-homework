#pragma once

#include <utility>

template<typename F, typename S>
struct Pair {
    Pair(F first, S second)
    : first{first}, second{second} { }

    template<typename SArg>
    Pair(F first, SArg second)
    : first{first}, second{std::forward(second)} { }

    template<typename FArg>
    Pair(FArg first, S second)
    : first{std::forward(first)}, second{second} { }

    template<typename FArg, typename SArg>
    Pair(FArg first, SArg second)
    : first{std::forward(first)}, second{std::forward(second)} { }

    ~Pair() noexcept = default;

    Pair(const Pair& other) = default;

    Pair(Pair&& other) noexcept = default;

    Pair& operator=(const Pair& other) = default;

    Pair& operator=(Pair&& other) noexcept = default;

    F first;

    S second;
};